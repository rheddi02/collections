// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  COLLABORATOR
  GUEST
  ADMIN
}

model Categories {
  id       Int     @id @default(autoincrement())
  title    String
  slug     String  @map("slug")
  icon     String? // emoji or custom icon
  isPinned Boolean @default(false) @map("is_pinned")

  // Relations
  userId        Int
  user          Users           @relation(fields: [userId], references: [id])
  links         Links[]
  shareId       String?         @unique // for public sharing
  collaborators Collaborators[]

  createdAt DateTime @default(now())
  deletedAt DateTime?
  updatedAt DateTime @updatedAt

  @@unique([title, userId])
  @@index([id])
}

model Links {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @map("slug")
  description String
  url         String
  userId      Int
  user        Users      @relation(fields: [userId], references: [id])
  categoryId  Int
  category    Categories @relation(fields: [categoryId], references: [id])

  tags      LinkTags[]
  favorites Favorites[]

  createdAt   DateTime   @default(now())
  deletedAt DateTime?
  updatedAt   DateTime   @updatedAt

  @@unique([url, userId])
  @@index([id])
}

model Users {
  id                      Int       @id @default(autoincrement())
  username                String    @unique
  email                   String    @unique
  password                String?
  role                    Role      @default(USER)
  isVerified              Boolean   @default(false) @map("is_verified")
  verificationCode        String?   @map("verification_code")
  verificationCodeExpires DateTime? @map("verification_code_expires")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  profile                 String?   @map("profile") // Optional profile field for user profile information
  cover                   String?   @map("cover") // Optional cover field for user profile information

  // Relations
  favorites     Favorites[]
  collaborators Collaborators[]
  sessions      Session[]
  links         Links[]
  categories    Categories[]

  @@index([id])
  @@index([username])
  @@index([email])
  @@map("users")
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String @unique

  links LinkTags[]
}

model LinkTags {
  linkId Int
  tagId  Int

  link Links @relation(fields: [linkId], references: [id])
  tag  Tags  @relation(fields: [tagId], references: [id])

  @@id([linkId, tagId])
}

model Favorites {
  userId Int
  linkId Int

  user Users @relation(fields: [userId], references: [id])
  link Links @relation(fields: [linkId], references: [id])

  @@id([userId, linkId])
}

model Collaborators {
  id   Int    @id @default(autoincrement())
  role String // "viewer" | "editor"

  userId     Int
  categoryId Int

  user     Users      @relation(fields: [userId], references: [id])
  category Categories @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime

  user Users @relation(fields: [userId], references: [id])
}
